Grammar = {
    SOI ~
    Item* ~
    EOI
}

restOfLine = _{
    (LETTER | MARK | NUMBER | PUNCTUATION | SYMBOL | SPACE_SEPARATOR)*
}

Item = _{
    (Comment | Declaration)
    | EmptyLine
    | Rule
}

Comment = { "#" ~ restOfLine ~ (NEWLINE | EOI) }

EmptyLine = @{ " "* ~ "\n" }

Declaration = {
    VariableName ~
    " "* ~
    ":=" ~
    " "* ~
    VariableContent ~
    " "* ~
    (NEWLINE | EOI)
}

VariableName = {
    (ASCII_ALPHA | "_" ) ~
    (ASCII_ALPHANUMERIC | "_" )+
}
VariableContent = _{ EvaluatableContent }

Rule = {
    RuleTargets ~ ":" ~ " "* ~ RuleDependencies
    ~ (NEWLINE | EOI)
    ~ RuleRecipe
}
RuleTargets = {
    ".PHONY" | (
        VariableName ~
        (" "+ ~ VariableName)*
    )
}
RuleDependencies = {
    VariableContent?
}
RuleRecipe = {
    ("\t" ~ RuleRecipeLine ~ (NEWLINE | EOI))*
}
EvaluatableContent = {
    NonStatement ~
    ( (EvaluatedStatement | LiteralDollar) ~ NonStatement)*
}
NonStatement = {
    (!("$" | NEWLINE) ~ ANY)*
}
EvaluatedStatement = {
    "$(" ~ EvaluatedStatementContent ~ ")"
}

RuleRecipeLine = _{
    EvaluatableContent
}

LiteralDollar = { "$$" }

// for now, keep it simple: just a variable name.
// later, we might allow function calls and recursive variables
EvaluatedStatementContent = { VariableName }